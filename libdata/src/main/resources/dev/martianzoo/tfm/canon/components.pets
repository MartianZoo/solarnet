abstract Component {
    default Component!
    default -Component!

    component This // TODO: abstract???

    component Die    // 0..0

    abstract Ephemeral {
      This:: -This
    }
    abstract Transient {
      This: -This.
    }
    abstract Litter {
      // This: (MAX 0 This: 0)
    }

    abstract Phase { // 0..1 (insufficient)
        // MAX 1 Phase // forced to do "ThisPhase FROM Phase" // NOspec

        component ProductionPhase
        component End
    }
    // 1
    abstract Anyone {
        component Npc

        abstract Player {
            ProductionPhase: -5 // terrible wart

            component Me
            component Player1
        }
    }

    component Generation

    abstract Generational {
        Generation: -This
    }

    // 1
    abstract Area(HAS MAX 1 Tile) {
        abstract RemoteArea
        abstract MarsArea {
            abstract LandArea {
                abstract VolcanicArea
            }
            abstract WaterArea
            abstract NoctisArea
        }
    }

    // 0..1 (insufficient)
    abstract Tile<Area> {
        // This: $createAdjacencies(This)
    }

    // 0..1
    component AreaAdjacency<MarsArea, MarsArea>
    component Neighbor<MarsArea, Tile> // (HAS Tile)
    component Adjacency<Tile, Tile> { // (HAS 2 Tile)
        // This: how to make sure both tiles exist??
        -Tile(HAS This): -This // shouldn't be necessary
    }

    abstract Owned<Anyone> {
        // default *Owned<Me>

        abstract Resource {
            abstract StandardResource {
                component Megacredit
                component Steel
                component Titanium
                component Plant
                component Heat
                component Energy {
                    ProductionPhase:: -This, Heat // FROM This
                }
            }
        }

        component Production<StandardResource> {
            ProductionPhase: StandardResource
        }

        component VictoryPoint

        // 0..1
        component HasRaisedTR : Generational

        component TerraformRating : Owned<Player> { // maybe important for WGT?
            This:: HasRaisedTR. // boo!
            ProductionPhase: 1
            End: VictoryPoint
        }

        abstract CardBack {
            component CorporationCard
            component PreludeCard
            component ProjectCard
        }

        abstract OwnedTile : Tile {
            component GreeneryTile : OwnedTile<MarsArea> {
                default GreeneryTile<LandArea(HAS Neighbor<OwnedTile>)>
                This: OxygenStep
                End: VictoryPoint
            }
            component CityTile {
                default CityTile<LandArea(HAS MAX 0 Neighbor<CityTile<Anyone>>)>
                End: VictoryPoint / Adjacency(HAS This, GreeneryTile<Anyone>)
            }
            component SpecialTile : OwnedTile<MarsArea> {
                default SpecialTile<LandArea>
            }
        }

        abstract CardFront {  // <Resource>? But it's optional...
            abstract EventCard {
                This: PlayedEvent, -This // FROM. shouldn't really be able to do this early
            }
            abstract AutomatedCard
            abstract ActiveCard
        }

        component PlayedEvent

        abstract Cardbound<CardFront> {
            // This:: (CardFront: 0)
            -CardFront: -This // happens when becoming a PlayedEvent

            abstract Tag {
                // Purchase<CardFront>:: Purchase<This>     // VERY IFFY
                // CardFront:: This                         // VERY IFFY

                component BuildingTag
                component SpaceTag
                component CityTag
                component PowerTag
                component ScienceTag

                abstract BioTag {
                    component PlantTag
                    component MicrobeTag
                    component AnimalTag
                }
                abstract PlanetaryTag {
                    component EarthTag
                    component VenusTag
                    component JovianTag
                }
            }

            abstract CardResource : Resource {
                -CardFront: Die // gotta deal with resources first
                default CardResource.

                component Animal
                component Asteroid
                component Fighter
                component Floater
                component Microbe
                component Science
            }

            abstract UseAction : Ephemeral {
                component UseAction1
                component UseAction2
                component UseAction3
            }

            // 0..1
            component CardUsed : Generational
        }

        abstract PayWall : Litter {
            component Required<Component> // GlobalParameter
            component Owed<Resource> {
              default -Owed.
              This:: Accept<Resource>.
            }
        }

        // 0..1 (insufficient)
        component Purchase<Component> : Ephemeral {
//          This: (MAX 0 PayWall: Component) // TODO
        }

        // 0..1 (insufficient)
        component PlayCard: Purchase<CardFront> {
//          This:: $handleRequirement(CardFront), Owed<Megacredit> / $costOf(CardFront)
//          This: (MAX 0 PayWall: CardFront, -ProjectCard) // TODO
        }

        component Pay<Resource> : Ephemeral {
          This:: -Owed<Resource>
        }

        // 0..1
        component Accept<Resource> : Transient {
            -> Pay<Resource>, -Resource // TODO: FROM; X
            // -Owed IF MAX 0 Owed:: -This
        }
    }

    // 1..1 TODO
    component GlobalEffects {
        Purchase<BuildingTag>: Accept<Steel>
        Purchase<SpaceTag>: Accept<Titanium>
    }

    // TODO atomized?
    abstract GlobalParameter {
        default GlobalParameter.

        This: TerraformRating

        // 0..9
        component OceanTile : Tile<MarsArea> {
            default OceanTile<WaterArea>
            // This IF =9
            This: Complete<OceanTile> // fail: that's abstract
            Adjacency<This, Tile>: 2
        }

        // 0..19
        component TemperatureStep {
            // This IF =3
            This: PROD[Heat]
            // This IF =5
            This: PROD[Heat]
            // This IF =15
            This: OceanTile
            // This IF =19
            This: Complete<TemperatureStep>
        }

        // 0..14
        component OxygenStep {
            // This IF =8
            This: TemperatureStep
            // This IF =14
            This: Complete<OxygenStep>
        }

        // 0..15
        component VenusStep {
            // This IF =4
            This: ProjectCard
            // This IF =8
            This: TerraformRating
            // This IF =15
            This: Complete<VenusStep>
        }

    }

    // 0..1
    component Complete<GlobalParameter> {
        GlobalParameter: Die
        -GlobalParameter: Die
    }

    // 1..1
    component StandardAction {
        component PlayCardFromHand {
            -> PlayCard<CardFront>
        }
        component UseStandardProject {
            -> UseAction<StandardProject>
        }
        component UseCardAction {
            -> CardUsed<CardFront>, UseAction<CardFront> // THEN?
        }
        component ConvertPlants {
            8 Plant -> GreeneryTile
        }
        component ConvertHeat {
            8 Heat -> TemperatureStep
        }
        component SellPatents {
            1 ProjectCard -> 1 // X
        }
    }

    // 1..1
    component StandardProject {
        component PowerPlant {
            11 -> PROD[Energy]
        }
        component AsteroidSP {
            14 -> TemperatureStep
        }
        component AirScrapping {
            15 -> VenusStep
        }
        component BufferGas {
            16 -> TerraformRating
        }
        component Aquifer {
            18 -> OceanTile
        }
        component Greenery {
            23 -> GreeneryTile
        }
        component City {
            25 -> CityTile, PROD[1]
        }
    }

    abstract NextCardEffect : Generational {
        Purchase<CardFront>:: -This
    }

    // TODO: move these to card defns
    component Card206Effect : NextCardEffect {
        Purchase<CardFront>:: -2 Required<GlobalParameter>
    }
    component Card195Effect : NextCardEffect {
        Purchase<CardFront>:: -8 Owed
    }

    component Card008Tile : CityTile
    component Card085Tile : SpecialTile
    component Card021Area : RemoteArea
    component Card081Area : RemoteArea
    component Card220Area : RemoteArea
    component Card236Area : RemoteArea
    component Card238Area : RemoteArea
    component Card248Area : RemoteArea
    component CardX12Area : RemoteArea
}
