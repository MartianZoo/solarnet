abstract Component {
    defaults { Component!, -Component! }

    component This

    // 0..0
    component Die

    // 0..1 (insufficient)
    abstract Phase {
        MAX 1 Phase // forced to do "ThisPhase FROM Phase" // NOspec

        component ProductionPhase, End
    }

    // 1
    abstract Anyone {
        component Npc

        abstract Player {
            ProductionPhase: -5 // terrible wart

            component Me
            component Player1
        }
    }

    component Generation

    abstract Generational {
        Generation: -This
    }

    // 1
    abstract Area {
        Occupant<This> IF 2 Occupant<This>: Die

        abstract RemoteArea
        abstract MarsArea {
            abstract LandArea {
                abstract VolcanicArea
            }
            abstract WaterArea
            abstract NoctisArea
        }
    }

    // 0..1 (insufficient)
    abstract Tile<Area> {
        // This: $createAdjacencies(This)
    }

    // 0..1
    component AreaAdjacency<MarsArea, MarsArea>
    component Neighbor<MarsArea, Tile> {
        This: (Tile: 0)
    }
    component Adjacency<Tile, Tile> {
        // This: how to make sure both tiles exist??
        -Tile(HAS This): -This // shouldn't be necessary
    }

    abstract Owned<Anyone> {
        defaults { *Owned<Me> }

        abstract Resource {
            abstract StandardResource {
                component Megacredit, Steel, Titanium, Plant, Heat
                component Energy {
                    ProductionPhase:: Heat FROM This
                }
            }
        }

        component Production<StandardResource> {
            ProductionPhase: StandardResource
        }

        component VictoryPoint

        // 0..1
        component HasRaisedTR : Generational

        component TerraformRating {
            This:: HasRaisedTR. // boo!
            ProductionPhase: 1
            End: VictoryPoint
        }

        abstract CardBack {
            component CorporationCard, PreludeCard, ProjectCard
        }

        abstract OwnedOccupant: Occupant {
            abstract OwnedTile : Tile {
                component GreeneryTile : OwnedTile<MarsArea> {
                    defaults { GreeneryTile<LandArea(HAS Neighbor<OwnedTile>)> }
                    This: OxygenStep
                    End: VictoryPoint
                }
                component CityTile {
                    defaults { CityTile<LandArea(HAS MAX 0 Neighbor<CityTile<Anyone>>)> }
                    End: VictoryPoint / Adjacency<This><GreeneryTile<Anyone>>
                }
                component SpecialTile : OwnedTile<MarsArea> {
                    defaults { SpecialTile<LandArea> }
                }
            }

            component Community
        }

        abstract CardFront {  // <Resource>? But it's optional...
          abstract EventCard {
            This: PlayedEvent FROM This // shouldn't really be able to do this early
          }
          abstract AutomatedCard
          abstract ActiveCard
        }

        component PlayedEvent

        abstract Cardbound<CardFront> {
            This:: (CardFront: 0)
            -CardFront: -This // happens when becoming a PlayedEvent

            abstract Tag {
                Purchase<CardFront>:: Purchase<This>     // VERY IFFY
                CardFront:: This                         // VERY IFFY

                component BuildingTag, SpaceTag, CityTag, PowerTag, ScienceTag

                abstract BioTag {
                    component PlantTag, MicrobeTag, AnimalTag
                }
                abstract PlanetaryTag {
                    component EarthTag, VenusTag, JovianTag
                }
            }

            // component WildTag {
            //     BeginAction: ActiveWildTag<Tag> // TODO ????
            // }

            abstract CardResource : Resource {
                -CardFront: Die // gotta deal with resources first
                defaults { CardResource. }

                component Animal, Asteroid, Fighter Floater, Microbe, Science
            }

            abstract UseAction : Ephemeral {
                component UseAction1, UseAction2, UseAction3
            }

            // 0..1
            component CardUsed : Generational
        }

        abstract PayWall : Temporary {
            component Required<GlobalParameter>
            component Owed<Resource> {
              defaults { -Owed. }
              This:: Accept<Resource>.
            }
        }

        // 0..1 (insufficient)
        component Purchase<Component> : Ephemeral {
            This: (MAX 0 PayWall: Component) // TODO
        }

        // 0..1 (insufficient)
        component PlayCard: Purchase<CardFront> {
            This:: $handleRequirement(CardFront), Owed<Megacredit> / $costOf(CardFront)
            This: (MAX 0 PayWall: CardFront FROM ProjectCard) // TODO
        }

        component Pay<Resource> : Ephemeral {
          This:: -Owed<Resource>
        }

        // 0..1
        component Accept<Resource>: Temporary {
            -> X Pay<Resource> FROM Resource
            -Owed IF MAX 0 Owed:: -This
        }
    }

    // 1..1 TODO
    component GlobalEffects {
        Purchase<BuildingTag>: Accept<Steel>
        Purchase<SpaceTag>: Accept<Titanium>
    }

    // TODO atomized?
    abstract GlobalParameter {
        defaults { GlobalParameter., -GlobalParameter. }

        This: TerraformRating

        // 0..9
        component OceanTile : Tile<MarsArea> {
            defaults { OceanTile<WaterArea> }
            Adjacency<This, Tile>: 2
        }

        // 0..19
        component TemperatureStep {
            This IF =3 This: PROD[Heat]
            This IF =5 This: PROD[Heat]
            This IF =15 This: OceanTile
        }

        // 0..14
        component OxygenStep {
            This IF =8 This: TemperatureStep
        }

        // 0..15
        component VenusStep {
            This IF =4 This: ProjectCard
            This IF =8 This: TerraformRating
        }
    }

    // 1..1
    component StandardAction {
        component PlayCardFromHand   { -> PlayCard<CardFront> }
        component UseStandardProject { -> UseAction<StandardProject> }
        component UseCardAction      { -> CardUsed<CardFront> THEN UseAction<CardFront> }
        component ConvertPlants      { 8 Plant -> GreeneryTile }
        component ConvertHeat        { 8 Heat -> TemperatureStep }
        component SellPatents        { X ProjectCard -> X }
    }

    // so there is viron which lets you pick an already-used action.


    // 1..1
    component StandardProject {
        component PowerPlant   { 11 -> PROD[Energy] }
        component AsteroidSP   { 14 -> TemperatureStep }
        component AirScrapping { 15 -> VenusStep }
        component BufferGas    { 16 -> TerraformRating }
        component Aquifer      { 18 -> OceanTile }
        component Greenery     { 23 -> GreeneryTile }
        component City         { 25 -> CityTile, PROD[1] }
    }

    abstract NextCardEffect : Generational {
        Purchase<CardFront>:: -This
    }

    // TODO: move these to card defns
    component Card206Effect : NextCardEffect {
        Purchase<CardFront>:: -2 Required<GlobalParameter>
    }
    component Card195Effect : NextCardEffect {
        Purchase<CardFront>:: -8 Owed
    }

    component Card008Tile : CityTile
    component Card085Tile : SpecialTile
    component Card021Area : RemoteArea
    component Card081Area : RemoteArea
    component Card220Area : RemoteArea
    component Card236Area : RemoteArea
    component Card238Area : RemoteArea
    component Card248Area : RemoteArea
    component CardX12Area : RemoteArea
}
