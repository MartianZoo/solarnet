abstract class Component {
    default Component!
    default -Component!
}

abstract class System
abstract class This : System

abstract class Ephemeral { // removes itself immediately - will never observe it existing
    count 0..0

    This:: -This
}

class Ok : System, Ephemeral // when you need to do nothing

abstract class Transient { // will be gone before end of action (or user can remove)
    This: -This.
}

abstract class Litter { // player must clean up themselves, by end of action
    This: (MAX 0 This: Ok)
}

class Die : System { // anything that tries to create this will stall
    count 0..0
}

abstract class Atomized // for global params which are always increased one by one

class Generation

abstract class Generational { // things that disappear when the generation changes over
    Generation:: -This
}

abstract class Phase : System {
    count 0..1 // insufficient

    // This IF 2 Phase:: Die    // forced to do "ThisPhase FROM Phase" // ack, no spec
    // -This IF MAX 0 Phase:: Die  // cycles

    class ProductionPhase
    class End
}

abstract class Anyone {
    count 1..1

    class Npc : System

    abstract class Player {
        This:: 14 TerraformRating
        This:: PROD[5]         // an ugly wart
        ProductionPhase: -5    // same ugly wart

        class Me
        // concrete players to be created dynamically
    }
}

abstract class Area {
    count 1..1

    // Tile<This>:: (=1 Tile<This>: Ok) // TODO cycle

    abstract class RemoteArea
    abstract class MarsArea {
        // Tile<This>: $bonus(This)

        abstract class LandArea {
            abstract class VolcanicArea
        }
        abstract class WaterArea
        abstract class NoctisArea
    }
}

abstract class Tile<Area> {
    count 0..1 // insufficient; see Area effect

    // This:: $createAdjacencies(This)
}

class AreaAdjacency<MarsArea, MarsArea> : System {
    count 0..1
}

class Neighbor<MarsArea, Tile>(HAS Tile) : System {
    count 0..1
}

class Adjacency<Tile, Tile>(HAS 2 Tile) : System {
    count 0..1

    // TODO How to make sure both tiles exist??

    -Tile(HAS This):: -This
}

abstract class Owned<Anyone> {
    // default *Owned<Me>

    abstract class PayWall : Litter, System {
        class Required<Component> // GlobalParameter
    }

    class Purchase<Component> : Ephemeral, System { // exists just to trigger things
        This: (MAX 0 PayWall: Component) //  TODO don't trigger for PlayCard
    }

    abstract class Resource {
        abstract class StandardResource {
            class Megacredit
            class Steel // Purchase<BuildingTag>:: Accept<This> - cycle
            class Titanium // Purchase<SpaceTag>:: Accept<This>
            class Plant
            class Heat
            class Energy { ProductionPhase:: Heat FROM This }
        }
    }

    class Production<StandardResource> { // TODO ensure owner == owner?
        ProductionPhase: StandardResource
    }

    class Owed<Resource> : PayWall {
       default -Owed.

       This:: Accept<Resource>
    }

    class Pay<Resource> : Ephemeral, System {
        This:: -Owed<Resource>
    }

    class Accept<Resource> : Transient, System {
        count 0..1
        default Accept.

        -> Pay<Resource> FROM Resource // okay it is handled more specially than this
        -Owed IF MAX 0 Owed:: -This
    }

    class VictoryPoint {
        This:: (End: Ok) // can't exist until endgame
    }

    class HasRaisedTR : Generational, System {
        count 0..1
    }

    class TerraformRating : Owned<Player> {
        This:: HasRaisedTR.
        ProductionPhase: 1
        End: VictoryPoint
    }

    // For "follow mode"
    abstract class CardBack { class CorporationCard, PreludeCard, ProjectCard }

    abstract class OwnedTile : Tile {
        class GreeneryTile : OwnedTile<MarsArea> {
            default GreeneryTile<LandArea(HAS Neighbor<OwnedTile>)>

            This: OxygenStep
            End: VictoryPoint
        }
        class CityTile {
            default CityTile<LandArea(HAS MAX 0 Neighbor<CityTile<Anyone>>)>

            End: VictoryPoint / Adjacency(HAS This, GreeneryTile<Anyone>)
        }
        class SpecialTile : OwnedTile<MarsArea> {
            default SpecialTile<LandArea>
        }
    }

    abstract class CardFront { // <CardResource> {  TODO circular
        count 0..1

        abstract class EventCard {
            This: PlayedEvent FROM This // shouldn't really be able to do this early
        }
        abstract class AutomatedCard
        abstract class ActiveCard

        // Remember, corps and preludes have none of those types
    }

    class PlayedEvent

    abstract class Cardbound<CardFront> {
        This:: (CardFront: Ok) // the card must actually be in play
        -CardFront:: -This     // becoming a PlayedEvent removes the tags

        abstract class Tag {
            // Purchase<CardFront>:: Purchase<This>     // VERY IFFY
            // CardFront:: This                         // VERY IFFY

            class BuildingTag, SpaceTag, CityTag, PowerTag, ScienceTag
            abstract class BioTag    { class PlantTag, MicrobeTag, AnimalTag }
            abstract class PlanetTag { class EarthTag, JovianTag, VenusTag }
        }

        abstract class CardResource : Resource { // , Cardbound<CardFront<CardResource>> { TODO
            -CardFront:: Die // gotta remove the resources first
            default CardResource.

            class Animal, Asteroid, Floater, Microbe, Science

            class NoResource : Die // so that non-holding cards have a type
        }

        class CardUsed : Generational {
            count 0..1
        }
    }

    abstract class UseAction : Ephemeral, System {
        class UseAction1, UseAction2, UseAction3, UseAction4
    }

    class PlayCard : Purchase<CardFront> {
//      This:: $handleRequirement(CardFront), Owed<Megacredit> / $costOf(CardFront)
        This: (MAX 0 PayWall: (CardFront, -ProjectCard))
    }
}

abstract class GlobalParameter : Atomized {
    default GlobalParameter.
    default -GlobalParameter.

    This: TerraformRating

    class OceanTile : Tile<MarsArea> {
        // count 0..9 // TODO that doesn't work
        default OceanTile<WaterArea>

        Adjacency<This, Tile>: 2
    }

    class TemperatureStep {
        count 0..19

        This IF =3 This: PROD[Heat]
        This IF =5 This: PROD[Heat]
        This IF =15 This: OceanTile
    }

    class OxygenStep {
        count 0..14

        This IF =8 This: TemperatureStep
    }

    class VenusStep {
        count 0..15

        This IF =4 This: ProjectCard
        This IF =8 This: TerraformRating
    }
}

// TODO figure out how to get these back on one line
class StandardAction {
    count 1..1

    class PlayCardFromHand   { -> PlayCard<CardFront> }
    class UseStandardProject { -> UseAction<StandardProject> }
    class UseCardAction      { -> CardUsed<CardFront> THEN UseAction<CardFront> }
    class ConvertPlants      { 8 Plant -> GreeneryTile }
    class ConvertHeat        { 8 Heat -> TemperatureStep }
    class SellPatents        { 1 ProjectCard -> 1 } // TODO X
}

class StandardProject {
    count 1..1

    class PowerPlant   { 11 -> PROD[Energy] }
    class AsteroidSP   { 14 -> TemperatureStep }
    class AirScrapping { 15 -> VenusStep }
    class BufferGas    { 16 -> TerraformRating }
    class Aquifer      { 18 -> OceanTile }
    class Greenery     { 23 -> GreeneryTile }
    class City         { 25 -> CityTile, PROD[1] }
}

abstract class NextCardEffect : Generational, System {
    count 0..1

    Purchase<CardFront>:: -This // goes away whether you use it or not
}

// TODO move these to card defns?
class Card206Effect : NextCardEffect { Purchase<CardFront>:: -2 Required<GlobalParameter> }
class Card195Effect : NextCardEffect { Purchase<CardFront>:: -8 Owed }

class Disease : CardResource
class Fighter: CardResource
class Preservation: CardResource

class Card008Tile : CityTile
class Card085Tile : SpecialTile
class Card021Area : RemoteArea
class Card081Area : RemoteArea
class Card220Area : RemoteArea
class Card236Area : RemoteArea
class Card238Area : RemoteArea
class Card248Area : RemoteArea
class CardX12Area : RemoteArea
