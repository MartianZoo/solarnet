/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.martianzoo.tfm.data

import com.google.common.truth.Truth.assertThat
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.martianzoo.tfm.data.CardData.Deck.CORPORATION
import org.martianzoo.tfm.data.CardData.Deck.PRELUDE
import org.martianzoo.tfm.data.CardData.Deck.PROJECT
import org.martianzoo.tfm.data.CardData.ProjectKind.ACTIVE
import org.martianzoo.tfm.data.CardData.ProjectKind.AUTOMATED
import org.martianzoo.tfm.data.CardData.ProjectKind.EVENT

class CardDataTest {
  /**
   * This is honestly an incredibly stupid test that data classes shouldn't need to have.
   */
  @Test
  fun minimal() {
    val dumbCard = CardData("xxx", deck = PRELUDE, effects = listOf("This: Plant"))

    assertThat(dumbCard.id).isEqualTo("xxx")
    assertThat(dumbCard.bundle).isNull()
    assertThat(dumbCard.deck).isEqualTo(PRELUDE)
    assertThat(dumbCard.tags).isEmpty()
    assertThat(dumbCard.effects).containsExactly("This: Plant")
    assertThat(dumbCard.replacesId).isNull()
    assertThat(dumbCard.resourceType).isNull()
    assertThat(dumbCard.requirement).isNull()
    assertThat(dumbCard.cost).isEqualTo(0)
    assertThat(dumbCard.projectKind).isNull()
  }

  /** This test is also quite pointless, but shows an example usage for readers. */
  @Test
  fun realCard() {
    val birds = CardData(
        id = "072",
        bundle = "B",
        deck = PROJECT,
        tags = listOf("AnimalTag"),
        effects = listOf(
            "This: PROD[-2 Plant<Anyone>]",
            "-> Animal<This>",
            "End: VictoryPoint / Animal<This>",
        ),
        resourceType = "Animal",
        requirement = "13 OxygenStep",
        cost = 10,
        projectKind = ACTIVE,
    )

    assertThat(birds.id).isEqualTo("072")
    assertThat(birds.bundle).isEqualTo("B")
    assertThat(birds.deck).isEqualTo(PROJECT)
    assertThat(birds.tags).containsExactly("AnimalTag")
    assertThat(birds.effects).containsExactly(
        "This: PROD[-2 Plant<Anyone>]",
        "-> Animal<This>",
        "End: VictoryPoint / Animal<This>",
    ).inOrder()
    assertThat(birds.replacesId).isNull()
    assertThat(birds.resourceType).isEqualTo("Animal")
    assertThat(birds.requirement).isEqualTo("13 OxygenStep")
    assertThat(birds.cost).isEqualTo(10)
    assertThat(birds.projectKind).isEqualTo(ACTIVE)
  }

  // Just so we don't have to keep repeating the "x" part
  private val C: CardData = CardData("x")

  /** Let's just show that C works normally at all */
  @Test
  fun justToBeSure() {
    val card = C.copy()
  }

  @Test
  fun emptyStrings() {
    assertThrows<RuntimeException> { CardData("") }
    assertThrows<RuntimeException> { C.copy(bundle = "") }
    assertThrows<RuntimeException> { C.copy(replacesId = "") }
    assertThrows<RuntimeException> { C.copy(resourceType = "") }
    assertThrows<RuntimeException> { C.copy(requirement = "") }
  }

  @Test
  fun badCost() {
    assertThrows<RuntimeException> { C.copy(cost = -1) }
    assertThrows<RuntimeException> { C.copy(deck = PRELUDE, cost = 1) }
    assertThrows<RuntimeException> { C.copy(deck = CORPORATION, cost = 1) }
  }

  @Test
  fun badProjectKind() {
    assertThrows<RuntimeException> { C.copy(deck = CORPORATION, projectKind = ACTIVE) }
    assertThrows<RuntimeException> { C.copy(deck = PRELUDE, projectKind = AUTOMATED) }
    assertThrows<RuntimeException> { C.copy(deck = PROJECT) }
  }

  @Test
  fun badRequirement() {
    assertThrows<RuntimeException> { C.copy(deck = CORPORATION, projectKind = ACTIVE) }
    assertThrows<RuntimeException> { C.copy(deck = PRELUDE, projectKind = AUTOMATED) }
  }

  @Test
  fun badActiveCard() {
    assertThrows<RuntimeException> {
      C.copy(projectKind = EVENT, effects = listOf("Foo: Bar"))
    }
    assertThrows<RuntimeException> {
      C.copy(projectKind = AUTOMATED, effects = listOf("This: Foo", "Bar: Qux"))
    }
  }
}
