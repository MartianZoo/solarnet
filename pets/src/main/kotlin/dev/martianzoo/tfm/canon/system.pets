abstract class Component {                             // Component is the single root of the hierarchy
    default +This!                                     // no need to write `: Component`; it's assumed
}
                                                       // magic rules: no nested specs. Class<Heat> is concrete. If decl
class Class<CLASS Component> (HAS =1 This)             // is `class Foo<CLASS Bar>`, (a) it is really `Foo<Class<Bar>>`,
                                                       // and (b) the usage `Foo<Qux>` is `Foo<Class<Qux>>`

abstract class Temporary {                             // anything that can never survive across actions

    class Ok(HAS MAX 0 This) { This:: -This }          // magic rule: won't trigger anything else (TODO)

    abstract class Signal(HAS MAX 0 This) {            // removes itself immediately - you'll never observe it existing,
        This:: -This                                   // but things can still be triggered by it
    }                                                  // TODO a magic rule that at least 1 effect must be triggered??

    class Die(HAS MAX 0 This)                          // since this has max 0 like Signal, but doesn't erase itself
                                                       // like Signal does, it is impossible to create one
}
