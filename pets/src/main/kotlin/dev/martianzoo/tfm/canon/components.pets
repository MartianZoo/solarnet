class Game(HAS MAX 1 MarsMap, MAX 1 Phase, MAX 9 OceanTile)

abstract class Anyone(HAS =1 This) {
    abstract class Player : Anyone {
        This:: 20 TerraformRating

        This:: PROD[5]                                 // No negative Components! So we need a hack; at least this one
        ProductionPhase: -5                            // confines the damage to Specialist/Generalist (and Robinson but it
    }                                                  // needs custom code anyway).
}                                                      // `Instr / PROD[1]` must be banned! But no great loss.

abstract class Area(HAS =1 This, MAX 1 Tile) {
    abstract class RemoteArea
    abstract class MarsArea {
        abstract class LandArea {
            abstract class VolcanicArea
        }
        abstract class WaterArea
        abstract class NoctisArea
    }
}

abstract class Tile<Area>

abstract class MarsMap {
    This:: $createMarsAreas(This) THEN $createBorders(This)

    class Tharsis, Hellas, Elysium
}

class Border<MarsArea, MarsArea>(HAS MAX 1 This) {
    // These probably have to be created programmatically; e.g. on Border<Tharsis3_3, Tharsis3_4>
    // we have `Tile<Tharsis3_4>: Neighbor<Tile, Tharsis3_3>`
}
class Neighbor<Tile, MarsArea>(HAS MAX 1 This) {
    Tile<MarsArea>: Adjacency<Tile, Tile<MarsArea>>
}
class Adjacency<Tile, Tile>(HAS MAX 1 This)

abstract class GlobalParameter {                       // TODO splittable...
    default GlobalParameter.                           // By default, gains are "if possible"

    This: TerraformRating

    class TemperatureStep(HAS MAX 19 This)
    class OxygenStep(HAS MAX 14 This)
    class VenusStep(HAS MAX 15 This)

    class OceanTile : Tile<MarsArea> {
        default OceanTile<WaterArea>

        Adjacency<This, Tile>: 2                       // TODO "BY Me"
    }
}

class TrackBonuser(HAS =1 This) {
    NOW 3 TemperatureStep: PROD[Heat]                  // `NOW <predicate>` fires whenever that predicate transitions
    NOW 5 TemperatureStep: PROD[Heat]                  // from false to true
    NOW 15 TemperatureStep: OceanTile

    NOW 8 OxygenStep: TemperatureStep

    NOW 4 VenusStep: ProjectCard
    NOW 8 VenusStep: TerraformRating

    NOW 10 OceanTile:: Die                             // OceanTile(HAS MAX 9 This) won't work
}

class Generation

abstract class Generational {                          // things that disappear when the generation changes over
    Generation:: -This                                 // and look, there they go (TODO ProductionPhase?)
}

abstract class Owned<Anyone> {                         // TODO default *Owned<Me>??
    class VictoryPoint

    abstract class Resource {
        abstract class StandardResource {
            class Megacredit
            class Steel {                              // It's certainly strange that your steel resources themselves
                Purchase<BuildingTag>:: Accept<This>   // export their own power to pay for cards. But it should work?
            }
            class Titanium {
                Purchase<SpaceTag>:: Accept<This>
            }
            class Plant
            class Energy {
                ProductionPhase:: Heat FROM This       // :: ensures it happens before production
            }
            class Heat
        }
    }

    class Production<StandardResource> {
        ProductionPhase: StandardResource              // Specializing to Production<Heat> specializes this too
    }

    class TerraformRating : Owned<Player> {            // TODO what else should be <Player> and why
        ProductionPhase: 1
        End: VictoryPoint
    }

    abstract class CardBack {                          // For "follow mode" only
        class CorporationCard, PreludeCard, ProjectCard
    }

    abstract class OwnedTile : Tile {
        class GreeneryTile : Tile<MarsArea> {
            default GreeneryTile<LandArea(HAS Neighbor<OwnedTile>)> // TODO - yikes
            This: OxygenStep
            End: VictoryPoint
        }
        class CityTile {
            default CityTile<LandArea(HAS MAX 0 Neighbor<CityTile<Anyone>>)>
            End: VictoryPoint / Adjacency(HAS This, GreeneryTile<Anyone>)
        }
        abstract class SpecialTile : OwnedTile<MarsArea> {
            default SpecialTile<LandArea>
        }
    }

    abstract class Milestone                           // not really doing anything with this yet

    abstract class CardFront {                         // <CardResource>  TODO circular
        abstract class EventCard {
            This: PlayedEvent FROM This                // problem: how to still get the VPs??
        }                                              // could we get this happen autom. at EOT?
        abstract class AutomatedCard
        abstract class ActiveCard
    }

    class PlayedEvent

    abstract class Cardbound<CardFront> {
        This:: (CardFront: Ok)                         // i.e., the card must actually be in play
        -CardFront:: -This                             // on becoming a PlayedEvent

        // TODO .. but.. these have to exist as soon as the card does, for triggers....
        abstract class Tag {
            class BuildingTag, SpaceTag
            class CityTag, PowerTag, ScienceTag

            abstract class BioTag {
                class PlantTag, MicrobeTag, AnimalTag
            }
            abstract class PlanetTag {
                class EarthTag, JovianTag, VenusTag
            }
        }

        abstract class CardResource : Resource {       // , Cardbound<CardFront<CardResource>> { TODO
            -CardFront:: Die                           // gotta remove the resources first
            default CardResource.

            class Animal, Microbe, Science
            class Floater, Asteroid

            class NoResource { This:: Die }            // Because all cards must have a resource type
        }

        class ActionUsed(HAS MAX 1 This) : Generational
    }

    abstract class UseAction : Signal {
        class UseAction1, UseAction2, UseAction3, UseAction4
    }

    class PlayCard<CardBack> {   // not open ... extend Purchase???
//      This:: CardBack: $handleRequirement(CardFront), Owed<Megacredit> / $costOf(CardFront)
        This: (MAX 0 Barrier: CardFront FROM CardBack)
    }
}

abstract class StandardAction(HAS =1 This) {
    class PlayCardFromHand   { -> PlayCard<CardFront> }
    class UseStandardProject { -> UseAction<StandardProject> }
    class UseCardAction      { -> UseAction<CardFront> THEN ActionUsed<CardFront> }
    class ConvertPlants      { 8 Plant -> GreeneryTile }
    class ConvertHeat        { 8 Heat -> TemperatureStep }

    class SellPatents        { 1 ProjectCard -> 1 }    // Technically a standard project, but that makes things hard
                                                       // TODO X
}

abstract class StandardProject(HAS =1 This) {
    class PowerPlant   { 11 -> PROD[Energy] }
    class AsteroidSP   { 14 -> TemperatureStep }
    class AirScrapping { 15 -> VenusStep }
    class Aquifer      { 18 -> OceanTile }
    class Greenery     { 23 -> GreeneryTile }
    class City         { 25 -> CityTile, PROD[1] }
}

abstract class Phase {
    class SetupPhase
    class CorporationPhase
    class PreludePhase
    class ResearchPhase
    class ActionPhase
    class ProductionPhase
    class SolarPhase
    class End
}
