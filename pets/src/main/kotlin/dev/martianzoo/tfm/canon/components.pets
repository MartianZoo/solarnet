// GLOBAL PARAMETERS ---------------------------------

abstract class GlobalParameter {                       // TODO splittable...
    default +This.                                     // by default, gains are "if possible"
    default -This.                                     // removes too

    This: TerraformRating                              // how connects to a player?

    class TemperatureStep(HAS MAX 19 This)
    class OxygenStep(HAS MAX 14 This)
    class VenusStep(HAS MAX 15 This)

    class OceanTile(HAS MAX 9 OceanTile) : Tile<MarsArea> {
        default +This<WaterArea>

        Adjacency<This, Tile>: 2                       // TODO "BY Player: 2 Megacredit<Player>"
    }
}

class TrackBonuser(HAS =1 This) {                      // TODO understand how this attaches to a player
    NOW 3 TemperatureStep: PROD[Heat]                  // A `NOW <reqt>` trigger fires whenever that reqt *transitions*
    NOW 5 TemperatureStep: PROD[Heat]                  // from unmet to met
    NOW 15 TemperatureStep: OceanTile

    NOW 8 OxygenStep: TemperatureStep                  // Annoyingly, this seems to be the ONLY class that needs that
                                                       // feature. But what alternatives?
    NOW 4 VenusStep: ProjectCard                       // `This: (=4 VenusStep: ProjectCard) OR Ok` would *require* GP
    NOW 8 VenusStep: TerraformRating                   // changes to be atomized, rather than just allowing it
}


// MAPS AND TILES ------------------------------------

abstract class MarsMap {
    This:: $createMarsAreas(This)
    This:: $createBorders(This)
    class Tharsis, Hellas, Elysium
}

abstract class Area(HAS =1 This, MAX 1 Tile) {
    abstract class RemoteArea
    abstract class MarsArea {                          // TODO <MarsMap>?
        abstract class LandArea {
            abstract class VolcanicArea
        }
        abstract class WaterArea
        abstract class NoctisArea
    }
}

abstract class Tile<Area>

class Border<MarsArea, MarsArea>(HAS MAX 1 This)

class Neighbor<Tile, MarsArea>(HAS MAX 1 This) {
    Tile<MarsArea>: Adjacency<Tile, Tile<MarsArea>>    // TODO need trigger-specialization
}

class Adjacency<Tile, Tile>(HAS MAX 1 This)


// ACTIONS -------------------------------------------

abstract class HasActions {

    abstract class StandardAction(HAS =1 This) {
        class PlayCardFromHand  { -> PlayCard<ProjectCard, CardFront> }
        class UseStandardProject{ -> UseAction<StandardProject> }
        class UseCardAction     { -> UseAction<ActionCard> THEN ActionUsedMarker<ActionCard> }
        class ConvertPlants     { 8 Plant -> GreeneryTile }
        class ConvertHeat       { 8 Heat -> TemperatureStep }

        // Technically this is a std project, but that makes credicor & std tech annoying. TODO "X"
        class SellPatents       { 1 ProjectCard -> 1 }
    }

    abstract class StandardProject(HAS =1 This) {
        class PowerPlant   { 11 -> PROD[Energy] }
        class AsteroidSP   { 14 -> TemperatureStep }
        class AirScrapping { 15 -> VenusStep }
        class Aquifer      { 18 -> OceanTile }
        class Greenery     { 23 -> GreeneryTile }
        class City         { 25 -> CityTile, PROD[1] }
    }
}


// WORKFLOW ------------------------------------------

class Generation(HAS 1 This)

abstract class Generational {                          // things that disappear when the generation changes over
    Generation:: -This                                 // <-- and look, there they go
}

// As much as possible, Phase objects shouldn't themselves do anything, but be more like signals.
abstract class Phase {
    class SetupPhase                                   // start of gameplay decisions, until players done discarding
    class CorporationPhase                             // each player plays corp & buys cards
    class PreludePhase                                 // each player does twice: play or discard a prelude card
    class ResearchPhase { This:: Generation }          // skipped in gen1
    class ActionPhase                                  // continues until all players have passed
    class ProductionPhase                              // self-explanatory
    class SolarPhase                                   // maybe we don't need to split it up
    class EndgameConvertPlantsPhase                    //
    class End                                          // triggers VP payouts
    class Shutdown                                     // assigns Outcomes then no more changes
}
