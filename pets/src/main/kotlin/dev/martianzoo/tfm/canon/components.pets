// These files contain definitions of classes. Not all of them will be defined during any actual
// game; that depends on how the game was configured. However, if a class is defined then it forces
// every other class its definition refers to to be defined as well (with the possible exception of
// effect *triggers*, since we can reason tht those triggers would simply never happen anyway.

// This file has game stuff that isn't player-specific

// GLOBAL PARAMETERS ---------------------------------------

ABSTRACT CLASS GlobalParameter {                            // TODO must be added 1-by-1 - how?
    DEFAULT +This.                                          // by default, gains are "if possible"

    This: TerraformRating                                   // becomes `This BY Player: TR<This>`
                                                            // side effect: WGT doesn't trigger it
    CLASS TemperatureStep {
        HAS MAX 19 This
        This: (=3 This: PROD[Heat]) OR Ok                   // gated instrs are still mandatory, so without the `OR Ok`
        This: (=5 This: PROD[Heat]) OR Ok                   // we would be at a dead end
        This: (=15 This: OceanTile) OR Ok
    }

    CLASS OxygenStep {
        HAS MAX 14 This
        This: (=8 OxygenStep: TemperatureStep) OR Ok
    }

    CLASS VenusStep {
        HAS MAX 15 This
        This: (=4 This: ProjectCard) OR Ok
        This: (=8 This: TerraformRating) OR Ok
    }

    CLASS OceanTile : Tile<MarsArea> {
        HAS MAX 9 OceanTile
        DEFAULT +This<WaterArea>
        ForwardAdjacency<This, Tile>: 2
    }
}


// MAPS AND TILES ------------------------------------------

ABSTRACT CLASS MarsMap {
    HAS MAX 1 MarsMap

    This:: $createAll(Border, This)                         // save all :: effects until after all
                                                            // singletons are created...
    CLASS Tharsis, Hellas, Elysium
}

ABSTRACT CLASS Area(HAS MAX 1 Tile) {
    HAS MAX 1 This

    ABSTRACT CLASS MarsArea {                               // TODO <MarsMap>?
        This:: $createAll(Row, This)

        ABSTRACT CLASS LandArea {
            ABSTRACT CLASS VolcanicArea
        }
        ABSTRACT CLASS WaterArea
        ABSTRACT CLASS NoctisArea
    }

    ABSTRACT CLASS RemoteArea(HAS MAX 0 Border)
}

ABSTRACT CLASS Tile<Area>
                                                            // TODO figure out how to not need this
CLASS Border<Area, MarsArea> {                              // early on will create 3-6 of these for each MarsArea
    HAS MAX 1 This                                          // listing that one first. So each border will actually
                                                            // be here twice, once in each direction
    Tile<Area>: Neighbor<Tile<Area>, MarsArea>              // TODO BRUTAL HACK BRUTAL HACK
}

CLASS Neighbor<Tile, MarsArea> {
    HAS MAX 1 This
    Tile<MarsArea>:: ForwardAdjacency<Tile, Tile<MarsArea>>
    Tile<MarsArea>:: BackwardAdjacency<Tile<MarsArea>, Tile>
}

ABSTRACT CLASS Adjacency<Tile, Tile> {
    HAS MAX 1 This
    CLASS ForwardAdjacency, BackwardAdjacency
}

CLASS Row<MarsArea>                                         // after creating Hellas_5_x then create 5 Row<Hellas_5_x>

// ACTIONS -------------------------------------------------

ABSTRACT CLASS HasActions {

    ABSTRACT CLASS StandardAction {
        HAS =1 This

        CLASS PlayCardFromHandSA   { -> PlayCard }
        CLASS UseStandardProjectSA { -> UseAction<StandardProject> }
        CLASS UseActionFromCardSA  { -> UseAction<ActionCard> THEN ActionUsedMarker<ActionCard> }
        CLASS ConvertPlantsSA      { 8 Plant -> GreeneryTile }
        CLASS ConvertHeatSA        { 8 Heat -> TemperatureStep }

        CLASS SellPatentsSA        { 1 ProjectCard -> 1 }   // Technically a standard project, but that makes Credicor
    }                                                       // and Std Tech annoying for no real benefit. TODO "X"

    ABSTRACT CLASS StandardProject {
        HAS =1 This

        CLASS PowerPlantSP   { 11 -> PROD[Energy] }
        CLASS AsteroidSP     { 14 -> TemperatureStep }
        CLASS AirScrappingSP { 15 -> VenusStep }
        CLASS AquiferSP      { 18 -> OceanTile }
        CLASS GreenerySP     { 23 -> GreeneryTile }
        CLASS CitySP         { 25 -> CityTile, PROD[1] }
    }
}


// WORKFLOW ------------------------------------------------

CLASS Generation { HAS 1 This }                             // we're always in at least gen 1

ABSTRACT CLASS Generational {                               // things that disappear between gens
    Generation:: -This                                      // <-- and look, there they go
}

ABSTRACT CLASS Phase {
    HAS MAX 1 Phase

    CLASS ProductionPhase
    CLASS End
}
