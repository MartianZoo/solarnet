// GLOBAL PARAMETERS ---------------------------------------

abstract class GlobalParameter {                            // TODO splittable...
    default +This.                                          // by default, gains are "if possible"
    default -This.                                          // removes too

    This: TerraformRating                                   // rule: unspec'd Player -> active

    class TemperatureStep(HAS MAX 19 This)
    class OxygenStep(HAS MAX 14 This)
    class VenusStep(HAS MAX 15 This)

    class OceanTile(HAS MAX 9 OceanTile) : Tile<MarsArea> {
        default +This<WaterArea>
        Adjacency<This, Tile>: 2
    }
}

class TrackBonuser(HAS =1 This) {
    NOW 3 TemperatureStep: PROD[Heat]                       // A `NOW <reqt>` trigger fires whenever
    NOW 5 TemperatureStep: PROD[Heat]                       // that reqt *transitions* from unmet to
    NOW 15 TemperatureStep: OceanTile                       // met. Annoying that nothing else needs
                                                            // it but this, but I see no options.
    NOW 8 OxygenStep: TemperatureStep

    NOW 4 VenusStep: ProjectCard
    NOW 8 VenusStep: TerraformRating
}


// MAPS AND TILES ------------------------------------------

abstract class MarsMap {
    This:: $createMarsAreas(This)
    This:: $createBorders(This)
    class Tharsis, Hellas, Elysium
}

abstract class Area(HAS =1 This, MAX 1 Tile) {
    abstract class RemoteArea
    abstract class MarsArea {                               // TODO <MarsMap>?
        abstract class LandArea {
            abstract class VolcanicArea
        }
        abstract class WaterArea
        abstract class NoctisArea
    }
}

abstract class Tile<Area>

class Border<MarsArea, MarsArea>(HAS MAX 1 This)

class Neighbor<Tile, MarsArea>(HAS MAX 1 This) {
    Tile<MarsArea>: Adjacency<Tile, Tile<MarsArea>>         // TODO need trigger-specialization
}

class Adjacency<Tile, Tile>(HAS MAX 1 This)


// ACTIONS -------------------------------------------------

abstract class HasActions {

    abstract class StandardAction(HAS =1 This) {
        class PlayCardFromHand   { -> PlayCard<ProjectCard, CardFront> }
        class UseStandardProject { -> UseAction<StandardProject> }
        class UseActionFromCard  { -> UseAction<ActionCard> THEN ActionUsedMarker<ActionCard> }
        class ConvertPlants      { 8 Plant -> GreeneryTile }
        class ConvertHeat        { 8 Heat -> TemperatureStep }

        class SellPatents        { 1 ProjectCard -> 1 }     // Technically an SP but then std tech &
    }                                                       // credicor are annoying. TODO "X"

    abstract class StandardProject(HAS =1 This) {
        class PowerPlant   { 11 -> PROD[Energy] }
        class AsteroidSP   { 14 -> TemperatureStep }
        class AirScrapping { 15 -> VenusStep }
        class Aquifer      { 18 -> OceanTile }
        class Greenery     { 23 -> GreeneryTile }
        class City         { 25 -> CityTile, PROD[1] }
    }
}


// WORKFLOW ------------------------------------------------

class Generation(HAS 1 This)

abstract class Generational {                               // things that disappear between gens
    Generation:: -This                                      // <-- and look, there they go
}
                                                            // Phases should *do * as little as
abstract class Phase {                                      // possible, just be triggers.

    class SetupPhase                                        // start of gameplay thru discarding
    class CorporationPhase                                  // each player plays corp & buys cards
    class PreludePhase                                      // each: play or discard prelude 2x
    class ResearchPhase { This:: Generation }               // skipped in gen1
    class ActionPhase                                       // continues until all have passed
    class ProductionPhase                                   // self-explanatory
    class SolarPhase                                        // maybe we don't need to split it up
    class ConvertPlantsPhase                                // each does X UseAction<ConvertPlants>
    class End                                               // triggers VP payouts
    class Shutdown                                          // assigns Outcomes then no more changes
}
