// These files contain definitions of classes. Not all of them will be defined during any actual
// game; that depends on how the game was configured. However, if a class is defined then it forces
// every other class its definition refers to to be defined as well (with the possible exception of
// effect *triggers*, since we can reason tht those triggers would simply never happen anyway.

CLASS TerraformingMars : System {
  HAS =1 This

  This: SetupPhase

  PlayTag<Class<BuildingTag>>:: Accept<Class<Steel>>
  PlayTag<Class<SpaceTag>>:: Accept<Class<Titanium>>
  Pay<Class<Steel>>:: -2 Owed
  Pay<Class<Titanium>>:: -3 Owed                       // should be innocuous for TradeSA...

  Die: ForceLoad<Class<ActionPhase>>, ForceLoad<Class<EndPhase>>, ForceLoad<Class<Production>>
}

ABSTRACT CLASS GlobalParameter : Atomized {
  DEFAULT +GlobalParameter.                            // by default gains/removes are "if possible"
  DEFAULT -GlobalParameter.

  This: TerraformRating                                // transformed to `This BY Owner: TR<Owner>`

  CLASS TemperatureStep[TEMP] {
    HAS MAX 19 This
    This IF =3 This: PROD[Heat]
    This IF =5 This: PROD[Heat]
    This IF =15 This: OceanTile
  }

  CLASS OxygenStep[O2] {
    HAS MAX 14 This
    This IF =8 This: TemperatureStep
  }

  CLASS VenusStep[VEN] {
    HAS MAX 15 This
    This IF =4 This: ProjectCard
    This IF =8 This: TerraformRating
  }
  // OceanTile is in maps-tiles.pets
}

CLASS Generation { HAS 1 This }
ABSTRACT CLASS Generational { Generation:: -This. }    // things that disappear between gens

ABSTRACT CLASS Phase {
  HAS =1 Phase                                         // weird that this works, but it does

  CLASS SetupPhase
  CLASS CorporationPhase {
    NewTurn: PlayCard<Class<CorporationCard>>, 10 BuyCard?
  }
  CLASS PreludePhase {
    NewTurn: PlayCard<Class<PreludeCard>> OR (-PreludeCard THEN 15) // ELSE (#22)
  }
  CLASS ActionPhase {
    NewTurn: UseAction<StandardAction> OR Pass
  }
  CLASS ProductionPhase {
    This: Production2Phase FROM This
  }
  CLASS Production2Phase
  CLASS ResearchPhase { This:: Generation }
  CLASS EndPhase { This:: End }
}

CLASS End : Signal
