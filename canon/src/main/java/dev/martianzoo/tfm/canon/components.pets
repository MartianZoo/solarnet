// These files contain definitions of classes. Not all of them will be defined during any actual
// game; that depends on how the game was configured. However, if a class is defined then it forces
// every other class its definition refers to to be defined as well (with the possible exception of
// effect *triggers*, since we can reason tht those triggers would simply never happen anyway.

// This file has game stuff that isn't player-specific

CLASS Game : System {
  HAS MAX 1 This                                       // Created manually to kick everything off

  This:: @forceLoad(Class<Production>)
  This:: @forceLoad(Class<GrossHack>)
  This:: @forceLoad(Class<BackwardAdjacency>)

  PlayTag<Class<BuildingTag>>:: Accept<Class<Steel>>
  PlayTag<Class<SpaceTag>>:: Accept<Class<Titanium>>

  Pay<Class<Steel>>:: 2 Pay<Class<Megacredit>>
  Pay<Class<Titanium>>:: 3 Pay<Class<Megacredit>>      // should be innocuous for TradeAction?
}

// GLOBAL PARAMETERS ----------------------------------

ABSTRACT CLASS GlobalParameter {                       // Instances must be added 1-by-1 (TODO)
  DEFAULT +GlobalParameter.                            // by default gains/removes are "if possible"
  DEFAULT -GlobalParameter.

  This: TerraformRating                                // becomes `This BY Owner: TR<Owner>`

  CLASS TemperatureStep {                              // nesting is implicit subtyping
    HAS MAX 19 This                                    // why? because it's so convenient
    This IF =3 This: PROD[Heat]
    This IF =5 This: PROD[Heat]
    This IF =15 This: OceanTile
  }

  CLASS OxygenStep[O2] {
    HAS MAX 14 This
    This IF =8 This: TemperatureStep
  }

  CLASS VenusStep[VEN] {
    HAS MAX 15 This
    This IF =4 This: ProjectCard
    This IF =8 This: TerraformRating
  }

  CLASS OceanTile[OT] : Tile<MarsArea> {
    HAS MAX 9 OceanTile                                // `HAS MAX 9 This` wouldn't work!
    DEFAULT +OceanTile<WaterArea>
                                                       // We could almost count all adjacencies,
    ForwardAdjacency<This, Tile>: 2                    // except that the placement of this tile
  }                                                    // itself would trigger it
}


// MAPS AND TILES -------------------------------------

ABSTRACT CLASS MarsMap {                               // Tharsis etc. are loaded from `maps.json5`
  HAS =1 This
  // This:: @createAll(This, Border)                   // TODO
}

ABSTRACT CLASS Area : System {
  HAS =1 This
  HAS MAX 1 Tile<This>                                 // circular reference is un-ideal, but...

  ABSTRACT CLASS MarsArea[MA] {                        // specific areas loaded from `maps.json5`
    Tile<This>:: @createAdjacencies(This)              // TODO eventually we shouldn't need this
    ABSTRACT CLASS LandArea[LA] {
      ABSTRACT CLASS VolcanicArea[VA]
    }
    ABSTRACT CLASS WaterArea[WA]
    ABSTRACT CLASS NoctisArea[NA]
  }

  ABSTRACT CLASS RemoteArea[RA]
}

ABSTRACT CLASS Tile<Area>

CLASS Neighbor<Tile<MarsArea>, MarsArea> [NBR] : System

ABSTRACT CLASS Adjacency<Tile, Tile> [ADJ] : System {
  CLASS ForwardAdjacency, BackwardAdjacency
}


// WORKFLOW-ISH ---------------------------------------

ABSTRACT CLASS HasActions {                            // specific actions come from `actions.json5`
  ABSTRACT CLASS StandardAction { HAS =1 This }
  ABSTRACT CLASS StandardProject { HAS =1 This }
}

CLASS Generation[GEN]

ABSTRACT CLASS Generational {                          // things that disappear between gens
  Generation:: -This.                                  // <-- and look, there they go
}

ABSTRACT CLASS Phase : System {
  HAS MAX 1 Phase                                      // switch like `ProductionPhase FROM Phase`

  CLASS ProductionPhase
  CLASS End
}

// Player-specific components are in `player.pets`
