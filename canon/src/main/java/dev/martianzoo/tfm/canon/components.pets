// These files contain definitions of classes. Not all of them will be defined during any actual
// game; that depends on how the game was configured. However, if a class is defined then it forces
// every other class its definition refers to to be defined as well (with the possible exception of
// effect *triggers*, since we can reason tht those triggers would simply never happen anyway.

// This file has game stuff that isn't player-specific

CLASS Game : System {
    HAS MAX 1 This                                          // Created manually to kick everything off
    This:: @createSingletons()                              // TODO actually process this

    This:: @forceLoad(Border, Production, MetalHandler, GrossHack) // TODO pare down
}

// GLOBAL PARAMETERS ---------------------------------------

ABSTRACT CLASS GlobalParameter {                            // Instances must be added 1-by-1 - how to ensure?
                                                            // ... in theory, a trigger like `2 GP: Die`
    DEFAULT +GlobalParameter.                               // by default, gains & removes are "if possible"
    DEFAULT -GlobalParameter.

    This: TerraformRating                                   // becomes `This BY Owner: TR<Owner>`

    CLASS TemperatureStep {                                 // In PETS, nested classes automatically have their
        HAS MAX 19 This                                     // enclosing class as a superclass.
        This: (=3 This: PROD[Heat]) OR Ok
        This: (=5 This: PROD[Heat]) OR Ok                   // These are gated instructions, which are still mandatory
        This: (=15 This: OceanTile) OR Ok                   // like usual, so without `OR Ok` we'd be at a dead end
    }

    CLASS OxygenStep[O2] {
        HAS MAX 14 This
        This: (=8 This: TemperatureStep) OR Ok
    }

    CLASS VenusStep[VEN] {
        HAS MAX 15 This
        This: (=4 This: ProjectCard) OR Ok
        This: (=8 This: TerraformRating) OR Ok
    }

    CLASS OceanTile[OT] : Tile<MarsArea> {
        HAS MAX 9 OceanTile
        DEFAULT +OceanTile<WaterArea>
        ForwardAdjacency<This, Tile>: 2                     // We could almost count all adjacencies, except that the
    }                                                       // placement of this tile itself would trigger it
}


// MAPS AND TILES ------------------------------------------

ABSTRACT CLASS MarsMap {                                    // Tharsis etc. are loaded from `maps.json5`
    HAS =1 This

    // This:: @createBorders(This)
}

ABSTRACT CLASS Area(HAS MAX 1 Tile) {                       // TODO move invar to Tile somehow?
    HAS =1 This

    ABSTRACT CLASS MarsArea[MA] {                           // the individual areas are loaded from `maps.json5`
        ABSTRACT CLASS LandArea[LA] {                       // could have a dep on MarsMap but not clear why
            ABSTRACT CLASS VolcanicArea[VA]
        }
        ABSTRACT CLASS WaterArea[WA]
        ABSTRACT CLASS NoctisArea[NA]
    }

    ABSTRACT CLASS RemoteArea[RA]
}

ABSTRACT CLASS Tile<Area>
                                                            // For some reason <MA, A> triggers a bug,
CLASS Border<MarsArea, MarsArea> : System {                 // Early on we create 3-6 of these for each MarsArea
    HAS MAX 1 This                                          // listing that one first. So each border will actually
                                                            // be here twice, once in each direction
    Tile<MarsArea>: Neighbor<Tile<MarsArea>, Area>          // TODO this won't work
}

CLASS Neighbor<Tile<MarsArea>, Area> [NBR] {
    HAS MAX 1 This

    Tile<Area>:: ForwardAdjacency<Tile, Tile<Area>>, \
                 BackwardAdjacency<Tile<Area>, Tile>
}

ABSTRACT CLASS Adjacency<Tile, Tile> [ADJ] {
    HAS MAX 1 This
    CLASS ForwardAdjacency, BackwardAdjacency
}

CLASS Row<MarsArea>                                         // after creating Hellas_5_x then create 5 Row<Hellas_5_x>


// WORKFLOW-ISH --------------------------------------------

ABSTRACT CLASS HasActions {                                 // the specific actions are loaded from `actions.json5`
    ABSTRACT CLASS StandardAction, StandardProject
}

CLASS Generation[GEN]

ABSTRACT CLASS Generational {                               // things that disappear between gens
    Generation:: -This                                      // <-- and look, there they go
}

ABSTRACT CLASS Phase {
    HAS MAX 1 Phase

    CLASS ProductionPhase
    CLASS End
}

// Player-specific components are in `player.pets`
