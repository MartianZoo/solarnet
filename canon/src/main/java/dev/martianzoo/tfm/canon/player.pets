"Would be named Player except that `-4 Plant<Anyone>?` is more readable"
ABSTRACT CLASS Anyone[ANY] {
  "A player who can own things; currently this is all players, but we could introduce Npc"
  ABSTRACT CLASS Owner {
    HAS =1 This

    This: GrossHack<This>, Entropy<This>

    SetupPhase:: 20 TerraformRating<This>
    CorporationPhase:: CorporationCard
    PreludePhase:: 2 PreludeCard
    ResearchPhase: 4 BuyCard<This>?

    CLASS Player1[P1], Player2[P2], Player3[P3], Player4[P4], Player5[P5]
  }
}

"Everything owned by a player must be a subclass of this"
ABSTRACT CLASS Owned<Anyone> {
  DEFAULT Owned<Owner>                            // affects ALL refs to subtypes that don't give
                                                  // an owner... the only default of this kind
  "Well it's a victory point"
  CLASS VictoryPoint[VP]

  "One step on the terraform rating track; you start with 20 of them"
  CLASS TerraformRating[TR] {
    ProductionPhase: 1
    End: VictoryPoint
  }

  "Anything represented by a copper cube IRL, perhaps except for SRR resources (not sure)"
  ABSTRACT CLASS Resource[RES] {
    ABSTRACT CLASS StandardResource[SR] {
      CLASS Megacredit[M], Steel[S], Titanium[T], Plant[P], Energy[E], Heat[H]
    }
  }

  "Each instance of this creates an instance of a standard resource during ProductionPhase"
  CLASS Production<Class<StandardResource>> : AutoLoad { Production2Phase: StandardResource }

  "A milestone already claimed; unclaimed milestones exist only as a Class<ThatMilestoneType>"
  ABSTRACT CLASS Milestone[MIL] {
    HAS MAX 3 Milestone

    End: 5 VictoryPoint
  }

  "Performs energy-to-heat conversion for a player; exists only so that Supercapacitors can remove it"
  CLASS Entropy {
    HAS MAX 1 This
    ProductionPhase:: 999 Heat FROM Energy.
  }

  // Because of our model that the game state is "just a bag of things", you can't have a negative
  // number of any kind of thing. But in TfM megacredit production can be negative. Uh oh. There are
  // a few ways we could hack around this. This hack is actually not that bad; it confines the
  // damage to mostly just Specialist, Generalist, and Robinson. It is bug-prone, but all the
  // alternatives appear to be worse. This makes `PROD[1]` extremely dodgy -- almost worth taking
  // steps to ban, except that it does actually work just fine for Banker anyway.
  "You didn't see this"
  CLASS GrossHack : System {
    This: PROD[5]
    ProductionPhase: -5!
  }
}
