ABSTRACT CLASS Anyone[ANY] {                      // aka Player
  ABSTRACT CLASS Owner {
    HAS =1 This

    This: 20 TerraformRating<This>, GrossHack<This>, SuperHack<This>

    CorporationPhase:: CorporationCard
    PreludePhase:: 2 PreludeCard
    ResearchPhase: 4 BuyCard<This>?

    CLASS Player1[P1], Player2[P2], Player3[P3], Player4[P4], Player5[P5]
  }
}

ABSTRACT CLASS Owned<Anyone> {
  DEFAULT Owned<Owner>                            // affects ALL refs to subtypes that don't give
                                                  // an owner... the only default of this kind
  CLASS VictoryPoint[VP]

  CLASS TerraformRating[TR] {
    ProductionPhase: 1
    End: VictoryPoint
  }

  ABSTRACT CLASS Resource[RES] {
    ABSTRACT CLASS StandardResource[SR] {
      CLASS Megacredit[M], Steel[S], Titanium[T], Plant[P], Energy[E], Heat[H]
    }
  }

  CLASS Production<Class<StandardResource>> { Production2Phase: StandardResource }

  ABSTRACT CLASS Milestone[MIL] { End: 5 VictoryPoint }

  CLASS SuperHack { // TODO needs to be Owned?
    HAS MAX 1 This
    ProductionPhase:: Heat / Energy, -Energy / Energy
  }

  // Because of our model that the game state is "just a bag of things", you can't have a negative
  // number of any kind of thing. But in TfM megacredit production can be negative. Uh oh. There are
  // a few ways we could hack around this. This hack is actually not that bad; it confines the
  // damage to mostly just Specialist, Generalist, and Robinson. It is bug-prone, but all the
  // alternatives appear to be worse. This makes `PROD[1]` extremely dodgy -- almost worth taking
  // steps to ban, except that it does actually work just fine for Banker anyway.
  CLASS GrossHack : System {
    This: PROD[5]
    ProductionPhase: -5!
  }
}
