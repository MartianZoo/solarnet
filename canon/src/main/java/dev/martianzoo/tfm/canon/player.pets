// This file has player-specific game stuff

// PLAYERS ---------------------------------------

ABSTRACT CLASS Anyone[ANY] {                      // aka Player
  ABSTRACT CLASS Owner {
    HAS =1 This

    This:: 20 TerraformRating<This>               // Solo game support is in the far future...

    CLASS Player1[P1]
    CLASS Player2[P2]
    CLASS Player3[P3]
    CLASS Player4[P4]
    CLASS Player5[P5]
  }
}


// PLAYER PROPERTY / GENERAL ---------------------

ABSTRACT CLASS Owned<Anyone> {
  DEFAULT Owned<Owner>                            // affects ALL refs to subtypes that don't give
                                                  // an owner... the only default of this kind
  CLASS VictoryPoint[VP]

  CLASS TerraformRating[TR] {
    ProductionPhase: 1
    End: VictoryPoint
  }

  ABSTRACT CLASS Milestone[MIL]                   // specific ones loaded from `milestones.json5`


// TILES -----------------------------------------

  ABSTRACT CLASS OwnedTile : Owned, Tile {
    CLASS GreeneryTile[GT] : Tile<MarsArea> {
      // This needs to use `HAS?` or something TODO
      DEFAULT +GreeneryTile<LandArea(HAS Neighbor<OwnedTile>)>

      This: OxygenStep
      End: VictoryPoint
    }

    CLASS CityTile[CT] {
      DEFAULT +CityTile<LandArea(HAS MAX 0 Neighbor<CityTile<Anyone>>)>
      End: VictoryPoint / Adjacency<This, GreeneryTile<Anyone>>
    }

    ABSTRACT CLASS SpecialTile[ST] : Tile<MarsArea> {
      DEFAULT +SpecialTile<LandArea>
    }
  }


// RESOURCES -------------------------------------

  ABSTRACT CLASS Resource[RES] {                  // TODO when -Resource<Owner> default -Resource!,
    ABSTRACT CLASS StandardResource[SR] {         // but when -Resource<Anyone> default -Resource?
      CLASS Megacredit[M]
      ABSTRACT CLASS Metal {
        CLASS Steel[S]
        CLASS Titanium[T]
      }
      CLASS Plant[P]
      CLASS Energy[E] { ProductionPhase:: Heat FROM This }
      CLASS Heat[H]
    }

    ABSTRACT CLASS CardResource[CR] : Cardbound<ResourceCard<Class<CardResource>>> { // TODO This
      DEFAULT +CardResource.

      // All others are card-specific; see cards.json5
      CLASS Animal[ANI] : CardResource<ResourceCard<Class<Animal>>> // TODO simplify
      CLASS Microbe[MIC] : CardResource<ResourceCard<Class<Microbe>>>
      CLASS Science[SCI] : CardResource<ResourceCard<Class<Science>>>
      CLASS Floater[FLO] : CardResource<ResourceCard<Class<Floater>>>
      CLASS Asteroid[AST] : CardResource<ResourceCard<Class<Asteroid>>>
    }
  }

  CLASS Production<Class<StandardResource>> {
    ProductionPhase: StandardResource
  }

  ABSTRACT CLASS ResourceCard<Class<CardResource>> : CardFront


// CARDS -----------------------------------------

  ABSTRACT CLASS CardBack {
    CLASS CorporationCard                         // once a card is played and becomes a CardFront,
    CLASS PreludeCard                             // nothing in the game ever cares what kind of a
    CLASS ProjectCard[PC]                         // CardBack it used to be... well, that USED to be
  }                                               // true until "Double Down" in Dec 2022

  ABSTRACT CLASS CardFront {                      // specific CardFronts are loaded from `cards.json5`
    ABSTRACT CLASS EventCard {
      This: PlayedEvent<Class<This>> FROM This
    }                                             // could we get this happen automatically at EOT?
    ABSTRACT CLASS AutomatedCard
    ABSTRACT CLASS ActiveCard

    ABSTRACT CLASS ActionCard : HasActions
  }

  CLASS PlayedEvent<Class<EventCard>> [EVT] {
    // End: @getVPsFrom(EventCard)
  }

  ABSTRACT CLASS Cardbound<CardFront> {
    ABSTRACT CLASS Tag {
      CLASS BuildingTag[BUT], SpaceTag[SPT]
      CLASS CityTag[CIT], PowerTag[POT], ScienceTag[SCT]

      ABSTRACT CLASS BioTag {                     // not really a game defined thing, but convenient
        CLASS PlantTag[PLT], MicrobeTag[MIT], AnimalTag[ANT]
      }
      ABSTRACT CLASS PlanetTag {
        CLASS EarthTag[EAT], JovianTag[JOT], VenusTag[VET]
      }
    }
  }


// ACTIONS ---------------------------------------

  ABSTRACT CLASS UseAction<HasActions> : Signal {
    CLASS UseAction1, UseAction2
  }

  // TODO still consider inverting this?
  CLASS ActionUsedMarker : Cardbound<ActionCard>, Generational {
    HAS MAX 1 This
  }


// PAYMENT MECHANICS -----------------------------

  ABSTRACT CLASS PaymentMechanic : Temporary, System {
    ABSTRACT CLASS Barrier {                      // player must clean up by end of action
      This: (MAX 0 This: Ok)
    }
    CLASS Owed<Class<Resource>> : Barrier {       // created when pmt due, removed by discount cards
      DEFAULT +Owed<Class<Megacredit>>
      This:: Accept<Class<Resource>>
    }
    CLASS Accept<Class<Resource>> {               // created in response to PlayTag or the actions
      HAS MAX 1 This                              //  on 4 special cards. (extend Temporary?)
      DEFAULT +Accept.
    }
    CLASS Pay<Class<Resource>> : Signal {         // used like `8 Pay<Class<Heat>> FROM Heat`, but
      DEFAULT +Pay<Class<Megacredit>>             // also cards can pay in response to signals
      This:: -Owed<Class<Resource>>.
    }
    CLASS PlayTag<Class<Tag>> : Signal            // triggers Accept<Steel/Dirig/etc.CLASS> and
                                                  // tag-based discounts

    // Used by PlayCardFromHand, ValTrust, EcoEx, ExSponsor, NewPartner, Merger; triggers EarthCat
    CLASS PlayCard<Class<CardBack>, Class<CardFront>> {
//    This:: (CardBack: @handleRequirement(Class<CardFront>))
//    This: Owed<Class<Megacredit>> / Cost<Class<CardFront>>
//    This: =0 Barrier: (CardFront FROM CardBack, -This)
    }
  }


// DISGUSTING HACKS ------------------------------

  // Because we can't have a "negative component" in the game, we have to choose between various
  // extremely ugly hacks. This one is actually not that bad; it confines the damage to just
  // Specialist, Generalist, and Robinson. But it is bug-prone. However, all the alternatives
  // appear to be worse. This makes `PROD[1]` extremely dodgy -- almost worth taking steps to ban,
  // except that it does actually work just fine for Banker anyway.
  CLASS GrossHack : System {
    HAS =1 This
    This:: PROD[5]
    ProductionPhase: -5!
  }
}
