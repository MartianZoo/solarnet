// This file has player-specific game stuff

// PLAYERS -------------------------------------------------

ABSTRACT CLASS Anyone {                                     // This would be called Player, it's just that when
                                                            // reading, `CityTile<Anyone>` makes more sense
    HAS =1 This

    This:: 20 TerraformRating                               // no solo mode yet
                                                            // We're forced to use some ugly hack; at least this one
    This:: PROD[5]                                          // confines the damage to Specialist/Generalist/Robinson and
    ProductionPhase: -5                                     // presentation issues. All the alternatives look worse.
                                                            // This makes `/ PROD[1]` extremely dodgy, almost worth
                                                            // banning... except it does still work fine for Banker.
    PlayTag<BuildingTag.CLASS>:: Accept<Steel.CLASS>
    PlayTag<SpaceTag.CLASS>:: Accept<Titanium.CLASS>        // TODO where do these really belong??

    Pay<Steel.CLASS>:: 2 Pay<Megacredit.CLASS>
    Pay<Titanium.CLASS>:: 3 Pay<Megacredit.CLASS>           // I think this will be innocuous for TradeAction

    CLASS Player1, Player2, Player3, Player4, Player5       // TODO not sure we want these here?
}


// PLAYER PROPERTY / GENERAL -------------------------------

ABSTRACT CLASS Owned<Anyone> {
    DEFAULT This<Me>                                        // affects ALL references to owned cpts that don't specify
                                                            // an owner -- the only DEFAULT of this kind we need
    CLASS VictoryPoint

    CLASS TerraformRating {
        ProductionPhase: 1
        End: VictoryPoint
    }

    ABSTRACT CLASS Milestone                                // specific milestones are loaded from `milestones.json5`


// TILES ---------------------------------------------------

    ABSTRACT CLASS OwnedTile : Tile, Owned {
        CLASS GreeneryTile : Tile<MarsArea> {
            // TODO this needs to use `HAS?` or something
            DEFAULT +This<LandArea(HAS Neighbor<OwnedTile>)>

            This: OxygenStep
            End: VictoryPoint
        }

        CLASS CityTile {
            DEFAULT +This<LandArea(HAS MAX 0 Neighbor<CityTile<Anyone>>)>
            End: VictoryPoint / Adjacency<This, GreeneryTile<Anyone>>
        }

        ABSTRACT CLASS SpecialTile : Tile<MarsArea> {
            DEFAULT +This<LandArea>
        }
    }


// RESOURCES -----------------------------------------------

    ABSTRACT CLASS Resource {
        ABSTRACT CLASS StandardResource {
            CLASS Megacredit, Steel, Titanium, Plant, Heat
            CLASS Energy { ProductionPhase:: Heat FROM This }
        }

        ABSTRACT CLASS CardResource : Cardbound<ResourcefulCard<CardResource.CLASS>> { // TODO This .CLASS
            DEFAULT +This.

            // All others are card-specific; see cards.json5
            CLASS Animal : CardResource<ResourcefulCard<Animal.CLASS>>
            CLASS Microbe : CardResource<ResourcefulCard<Microbe.CLASS>>
            CLASS Science : CardResource<ResourcefulCard<Science.CLASS>>
            CLASS Floater : CardResource<ResourcefulCard<Floater.CLASS>>
            CLASS Asteroid : CardResource<ResourcefulCard<Asteroid.CLASS>>
        }
    }

    CLASS Production<StandardResource^1.CLASS> {
        ProductionPhase: StandardResource^1
    }

    ABSTRACT CLASS ResourcefulCard<CardResource.CLASS> : CardFront


// CARDS ---------------------------------------------------

    ABSTRACT CLASS CardBack {
        CLASS CorporationCard                               // once a card is played and becomes a CardFront, nothing in
        CLASS PreludeCard                                   // the game ever cares what kind of CardBack it used to be..
        CLASS ProjectCard                                   // well that used to be true until "Double Down" in Dec 2022
    }

    ABSTRACT CLASS CardFront {                               // specific CardFronts are loaded from `cards.json5`
        This:: @createAll(Cost, This)

        ABSTRACT CLASS EventCard {
            This: PlayedEvent FROM This                     // problem: how to still get the VPs??
        }                                                   // could we get this happen automatically at EOT?
        ABSTRACT CLASS AutomatedCard
        ABSTRACT CLASS ActiveCard                           // these types can all be mixed; what prevents bogus combos?

        ABSTRACT CLASS ActionCard : HasActions
    }

    CLASS PlayedEvent

    ABSTRACT CLASS Cardbound<CardFront<Anyone^1>> : Owned<Anyone^1> {

        ABSTRACT CLASS Tag {
            CLASS BuildingTag, SpaceTag
            CLASS CityTag, PowerTag, ScienceTag

            ABSTRACT CLASS BioTag {                         // not really a game defined thing, but convenient
                CLASS PlantTag, MicrobeTag, AnimalTag
            }
            ABSTRACT CLASS PlanetTag {
                CLASS EarthTag, JovianTag, VenusTag
            }
        }

        CLASS Cost                                          // as part of creating Card001<P4>, make 8 Cost<Card001<P4>>
    }                                                       // does this really need to be `Owned`?


// ACTIONS -------------------------------------------------

    ABSTRACT CLASS UseAction<HasActions> : Signal {         // TODO How to make owner same, when HasActions has both
        CLASS UseAction1, UseAction2                        // owned and unowned subclasses?
    }

    // TODO still consider inverting this?
    CLASS ActionUsedMarker : Cardbound<ActionCard>, Generational {
        HAS MAX 1 This
    }


// PAYMENT MECHANICS ---------------------------------------

    ABSTRACT CLASS PaymentMechanic : Temporary {
        ABSTRACT CLASS Barrier {                            // player must clean up themselves, by end of action
            This: (MAX 0 This: Ok)                          // adds a task that can only be handled if 0 barriers left
        }

        CLASS Owed<Resource^1.CLASS> : Barrier {            // created when payment due, removed by discount cards/
            This:: Accept<Resource^1.CLASS>
        }

        CLASS Accept<Resource.CLASS> {                      // Created in response to PlayTag or the actions on 4
            HAS MAX 1 This                                  // special cards. (extend Temporary?)
            DEFAULT +This.
        }

        CLASS Pay<Resource^1.CLASS> : Signal {              // player uses it like `8 Pay<Heat.CLASS> FROM Heat`
            This:: -Owed<Resource^1.CLASS>.                 // But also cards can pay in response to signals
        }

        CLASS PlayTag<Tag.CLASS> : Signal                   // triggers Accept<Steel/Dirig/etc.CLASS> and tag-based discounts

                                                            // used by PlayCardFromHand, ValTrust, EcoEx, ExSponsor,
        CLASS PlayCard<CardBack.CLASS, CardFront.CLASS> {   // NewPartner, Merger; triggers EarthCat etc.
  //        This:: (CardBack: @handleRequirement(CardFront.CLASS))
  //        This: Owed<Megacredit.CLASS> / Cost<CardFront.CLASS>
  //        This: =0 Barrier: (CardFront FROM CardBack, -This) // adds task to queue that must eventually be completed
        }
    }
}
